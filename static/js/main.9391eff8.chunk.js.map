{"version":3,"sources":["logo.svg","Card.js","CardArray.js","Header.js","footer.js","SearchBox.js","ErrorBoundry.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","name","email","id","react_default","a","createElement","className","src","concat","alt","CardArray","_ref","robots","cardComponent","map","user","i","src_Card","key","Header","Footer","href","target","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","App","onRequestRobots","_this$props","onSearchChange","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","width","height","logo","src_Header_0","src_SearchBox","src_ErrorBoundry","src_CardArray","footer","connect","searchRobots","requstRobots","dispatch","event","payload","value","fetch","then","response","json","users","catch","requestRobots","Boolean","window","location","hostname","match","searchFieldState","requestRobotState","rootReducers","combineReducers","arguments","length","undefined","action","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9391eff8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\tconst {name, email, id} = props;\r\n\treturn (\r\n\t\t\t<div className='bg-light-green tc dib pa3 br3 ma2 grow bw2 shadow'>\r\n\t\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2> {name} </h2>\r\n\t\t\t\t\t<p> {email} </p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\n\r\nconst CardArray = ({robots}) => {\r\n\tconst cardComponent = robots.map((user, i) => {\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\t\tkey ={i}\r\n\t\t\t\tid = {robots[i].id} \r\n\t\t\t\tname = {robots[i].name} \r\n\t\t\t\temail = {robots[i].email} \r\n\t\t\t/>\r\n\t\t);\r\n\t});\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardComponent}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default CardArray;","import React from 'react';\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t\t<div  className='tc bg-pink vh-25 thisHeader flow'>\r\n\t\t\t\t<h1 className=\"pa5\"> Rhoda's Kitchen Robots</h1>\r\n\t\t\t</div>\r\n\t\t\t);\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t<div> \r\n\t\t\t<p className=\"white\"> \r\n\t\t\t\t<strong> \r\n\t\t\t\t\tMade with love by \r\n\t\t\t\t\t<a className=\"f4 fw6 dib pink link hover-red\" href=\"https://github.com/tydotbaba\" target=\"_blank\"> \r\n\t\t\t\t\t\t@tydotbaba \r\n\t\t\t\t\t</a>\r\n\t\t\t\t</strong> \r\n\t\t\t</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName = 'pa3 ba b-solid-green bg-lightest-blue br4'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search robots'\r\n\t\t\tonChange= {searchChange} />\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1> Oooops Something went wrong! </h1>\r\n\t\t}\r\n\t\t// render the props in the children\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CardArray from './CardArray';\nimport Header from './Header';\nimport Footer from './footer';\nimport SearchBox from './SearchBox';\nimport ErrorBoundry from './ErrorBoundry';\n\n//import connect function for the redux\nimport {connect} from 'react-redux';\n//import actions\nimport {setSearchField, requestRobots} from './actions';\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    isPending: state.requstRobots.isPending,\n    error: state.requstRobots.error,\n    robots: state.requstRobots.robots\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => requestRobots(dispatch)\n  }\n}\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      robots: [],\n    }\n  }\n  // this function was formerly used \n  // so now am using redux\n  // onSearchChange = (event) => {\n  //   this.setState({searchField: event.target.value});\n  //   console.log(event.target.value);\n  // }\n\n  componentDidMount(){\n    //console.log(this.props.store.getState())\n    this.props.onRequestRobots();\n    //console.log('done');\n  }\n\n  \n  render() {\n    //const {robots} = this.state;\n    const {onSearchChange, searchField, isPending, error, robots} = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ? \n      <h1 className='tc ma5'> Loading, please wait! </h1>:\n      <div className='tc'>\n          <img width={200} height={150} className='fl' src={logo} alt='logo' />\n          <Header />\n          <SearchBox searchChange={onSearchChange}/>\n          <ErrorBoundry error={error}>\n            <CardArray robots={filteredRobots} />\n          </ErrorBoundry>\n          <Footer />\n      </div>\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOT_PENDING,\r\n\tREQUEST_ROBOT_SUCCESS,\r\n\tREQUEST_ROBOT_FAILED\r\n} from './constants';\r\n\r\n\r\nexport const setSearchField = (text) => {\r\n\treturn {\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n\t}\r\n}\r\n\r\nexport const requestRobots = (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOT_PENDING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => dispatch({type:REQUEST_ROBOT_SUCCESS,payload: users}))\r\n     \t.catch(error => dispatch({type: REQUEST_ROBOT_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING'\r\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS'\r\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOT_PENDING,\r\n\tREQUEST_ROBOT_SUCCESS,\r\n\tREQUEST_ROBOT_FAILED\r\n} from './constants';\r\n\r\n\r\nconst searchFieldState = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=searchFieldState, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\r\n\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst requestRobotState = {\r\n\tisPending: false,\r\n\terror: '',\r\n\trobots: []\r\n}\r\nexport const requstRobots = (state=requestRobotState, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOT_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true})\r\n\t\tcase REQUEST_ROBOT_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOT_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// connect the app to redux\nimport {Provider } from 'react-redux';\n//import functions to creat a store\nimport {createStore, applyMiddleware, combineReducers } from 'redux';\n//import reducers\nimport {searchRobots } from './reducers';\nimport {requstRobots } from './reducers';\n//import logger from redux\nimport {createLogger } from 'redux-logger';\n//import thunkMiddleware from redux\nimport thunkMiddleware from 'redux-thunk';\n//create root reducer\nconst rootReducers = combineReducers({searchRobots, requstRobots})\n//create a logger\nconst logger = createLogger();\n//creat a store\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\n\nReactDOM.render(\n\t\t\t<Provider store={store}>\n\t\t\t\t<App />\n\t\t\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}